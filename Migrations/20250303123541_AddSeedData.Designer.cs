// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestAPI_SamiHarun_Net24.Models.Data;

#nullable disable

namespace RestAPI_SamiHarun_Net24.Migrations
{
    [DbContext(typeof(CvDBContext))]
    [Migration("20250303123541_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestAPI_SamiHarun_Net24.Models.Erfarenhet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Företag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("År")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Erfarenheter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Företag = "Spotify",
                            JobTitel = "Software Developer",
                            PersonId = 1,
                            År = 2021
                        });
                });

            modelBuilder.Entity("RestAPI_SamiHarun_Net24.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KontaktInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Beskrivning = "Fullstack .NET utvecklare",
                            KontaktInfo = "sami@example.com",
                            Namn = "Sami Harun"
                        });
                });

            modelBuilder.Entity("RestAPI_SamiHarun_Net24.Models.Utbildning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Examen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Skola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SlutDatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Utbildningar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Examen = "Civilingenjör",
                            PersonId = 1,
                            Skola = "Chalmers Tekniska Högskola",
                            SlutDatum = new DateTime(2020, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDatum = new DateTime(2015, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RestAPI_SamiHarun_Net24.Models.Erfarenhet", b =>
                {
                    b.HasOne("RestAPI_SamiHarun_Net24.Models.Person", "Person")
                        .WithMany("Erfarenheter")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RestAPI_SamiHarun_Net24.Models.Utbildning", b =>
                {
                    b.HasOne("RestAPI_SamiHarun_Net24.Models.Person", "Person")
                        .WithMany("Utbildningar")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RestAPI_SamiHarun_Net24.Models.Person", b =>
                {
                    b.Navigation("Erfarenheter");

                    b.Navigation("Utbildningar");
                });
#pragma warning restore 612, 618
        }
    }
}
